/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class minimardi_Position */

#ifndef _Included_minimardi_Position
#define _Included_minimardi_Position
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     minimardi_Position
 * Method:    nativeFree
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_minimardi_Position_nativeFree
  (JNIEnv *, jobject, jlong);

/*
 * Class:     minimardi_Position
 * Method:    nativeCreate
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_minimardi_Position_nativeCreate
  (JNIEnv *, jobject);

/*
 * Class:     minimardi_Position
 * Method:    nativeNewChessPositionFen
 * Signature: (Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_minimardi_Position_nativeNewChessPositionFen
  (JNIEnv *, jobject, jstring);

/*
 * Class:     minimardi_Position
 * Method:    moveGeneratorNative
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_minimardi_Position_moveGeneratorNative
  (JNIEnv *, jclass, jlong);

/*
 * Class:     minimardi_Position
 * Method:    getZobristKeyNative
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_minimardi_Position_getZobristKeyNative
  (JNIEnv *, jclass, jlong);

/*
 * Class:     minimardi_Position
 * Method:    getToMoveNative
 * Signature: (J)C
 */
JNIEXPORT jchar JNICALL Java_minimardi_Position_getToMoveNative
  (JNIEnv *, jclass, jlong);

/*
 * Class:     minimardi_Position
 * Method:    getMaterialNative
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_minimardi_Position_getMaterialNative
  (JNIEnv *, jclass, jlong);

/*
 * Class:     minimardi_Position
 * Method:    getPosMovesNative
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_minimardi_Position_getPosMovesNative
  (JNIEnv *, jclass, jlong);

/*
 * Class:     minimardi_Position
 * Method:    getOutOfBookNative
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_minimardi_Position_getOutOfBookNative
  (JNIEnv *, jclass, jlong);

/*
 * Class:     minimardi_Position
 * Method:    setToMoveNative
 * Signature: (CJ)V
 */
JNIEXPORT void JNICALL Java_minimardi_Position_setToMoveNative
  (JNIEnv *, jclass, jchar, jlong);

/*
 * Class:     minimardi_Position
 * Method:    doMoveNative
 * Signature: (IJ)V
 */
JNIEXPORT void JNICALL Java_minimardi_Position_doMoveNative
  (JNIEnv *, jclass, jint, jlong);

/*
 * Class:     minimardi_Position
 * Method:    undoMoveNative
 * Signature: (IJ)V
 */
JNIEXPORT void JNICALL Java_minimardi_Position_undoMoveNative
  (JNIEnv *, jclass, jint, jlong);


/*
 * Class:     minimardi_Position
 * Method:    debugPrintCapListNative
 * Signature: (IJ)V
 */
JNIEXPORT void JNICALL Java_minimardi_Position_debugPrintCapListNative
  (JNIEnv *, jclass, jint, jlong);

/*
 * Class:     minimardi_Position
 * Method:    printPositionNative
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_minimardi_Position_printPositionNative
  (JNIEnv *, jclass, jlong);

/*
 * Class:     minimardi_Position
 * Method:    legalOpponentMoveNative
 * Signature: (IJ)I
 */
JNIEXPORT jint JNICALL Java_minimardi_Position_legalOpponentMoveNative
  (JNIEnv *, jclass, jint, jlong);

/*
 * Class:     minimardi_Position
 * Method:    drawOrCheckmateNative
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_minimardi_Position_drawOrCheckmateNative
  (JNIEnv *, jclass,jlong);

/*
 * Class:     minimardi_Position
 * Method:    inCheckIllegalNative
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_minimardi_Position_inCheckIllegalNative
  (JNIEnv *, jclass, jlong);

/*
 * Class:     minimardi_Position
 * Method:    getOpponentSideNative
 * Signature: (J)C
 */
JNIEXPORT jchar JNICALL Java_minimardi_Position_getOpponentSideNative
  (JNIEnv *, jclass, jlong);

/*
 * Class:     minimardi_Position
 * Method:    setSideWhiteNative
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_minimardi_Position_setSideWhiteNative
  (JNIEnv *, jclass, jlong);

/*
 * Class:     minimardi_Position
 * Method:    setSideBlackNative
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_minimardi_Position_setSideBlackNative
  (JNIEnv *, jclass, jlong);

/*
 * Class:     minimardi_Position
 * Method:    getCompSideNative
 * Signature: (J)C
 */
JNIEXPORT jchar JNICALL Java_minimardi_Position_getCompSideNative
  (JNIEnv *, jclass, jlong);

/*
 * Class:     minimardi_Position
 * Method:    isCompBlackNative
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_minimardi_Position_isCompBlackNative
  (JNIEnv *, jclass, jlong);

/*
 * Class:     minimardi_Position
 * Method:    isGameOverNative
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_minimardi_Position_isGameOverNative
  (JNIEnv *, jclass, jlong);

/*
 * Class:     minimardi_Position
 * Method:    getValueNative
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_minimardi_Position_getValueNative
  (JNIEnv *, jclass, jlong);

/*
 * Class:     minimardi_Position
 * Method:    getNodesNative
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_minimardi_Position_getNodesNative
  (JNIEnv *, jclass, jlong);

/*
 * Class:     minimardi_Position
 * Method:    setValueNative
 * Signature: (IIJ)V
 */
JNIEXPORT void JNICALL Java_minimardi_Position_setValueNative
  (JNIEnv *, jclass, jint, jint, jlong);

/*
 * Class:     minimardi_Position
 * Method:    setOutOfBookNative
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_minimardi_Position_setOutOfBookNative
  (JNIEnv *, jclass, jlong);

/*
 * Class:     minimardi_Position
 * Method:    inCheckNative
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_minimardi_Position_inCheckNative
  (JNIEnv *, jclass, jlong);

/*
 * Class:     minimardi_Position
 * Method:    repSearchNative
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_minimardi_Position_repSearchNative
  (JNIEnv *, jclass, jlong);

/*
 * Class:     minimardi_Position
 * Method:    getPlyNative
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_minimardi_Position_getPlyNative
  (JNIEnv *, jclass, jlong);

/*
 * Class:     minimardi_Position
 * Method:    whiteIsCastledNative
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_minimardi_Position_whiteIsCastledNative
  (JNIEnv *, jclass, jlong);

/*
 * Class:     minimardi_Position
 * Method:    blackIsCastledNative
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_minimardi_Position_blackIsCastledNative
  (JNIEnv *, jclass, jlong);

/*
 * Class:     minimardi_Position
 * Method:    lastMoveNullNative
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_minimardi_Position_lastMoveNullNative
  (JNIEnv *, jclass, jlong);

/*
 * Class:     minimardi_Position
 * Method:    piecesNative
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_minimardi_Position_piecesNative
  (JNIEnv *, jclass, jlong);

/*
 * Class:     minimardi_Position
 * Method:    getHistHeuristicNative
 * Signature: (J)Lminimardi/HistoryHeuristic;
 */
JNIEXPORT jobject JNICALL Java_minimardi_Position_getHistHeuristicNative
  (JNIEnv *, jclass, jlong);

/*
 * Class:     minimardi_Position
 * Method:    getMoveStackNative
 * Signature: (J)Lminimardi/MoveListStack;
 */
JNIEXPORT jobject JNICALL Java_minimardi_Position_getMoveStackNative
  (JNIEnv *, jclass, jlong);

#ifdef __cplusplus
}
#endif
#endif
